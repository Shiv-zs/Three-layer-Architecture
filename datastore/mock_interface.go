// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package datastore is a generated GoMock package.
package datastore

import (
	models "mytest/models"
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockBook is a mock of Book interface.
type MockBook struct {
	ctrl     *gomock.Controller
	recorder *MockBookMockRecorder
}

// MockBookMockRecorder is the mock recorder for MockBook.
type MockBookMockRecorder struct {
	mock *MockBook
}

// NewMockBook creates a new mock instance.
func NewMockBook(ctrl *gomock.Controller) *MockBook {
	mock := &MockBook{ctrl: ctrl}
	mock.recorder = &MockBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBook) EXPECT() *MockBookMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBook) Delete(c *gofr.Context, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBookMockRecorder) Delete(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBook)(nil).Delete), c, id)
}

// GetAll mocks base method.
func (m *MockBook) GetAll(c *gofr.Context) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", c)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBookMockRecorder) GetAll(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBook)(nil).GetAll), c)
}

// GetBookByTitle mocks base method.
func (m *MockBook) GetBookByTitle(c *gofr.Context, title string) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByTitle", c, title)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByTitle indicates an expected call of GetBookByTitle.
func (mr *MockBookMockRecorder) GetBookByTitle(c, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByTitle", reflect.TypeOf((*MockBook)(nil).GetBookByTitle), c, title)
}

// GetByID mocks base method.
func (m *MockBook) GetByID(c *gofr.Context, id int) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", c, id)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBookMockRecorder) GetByID(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBook)(nil).GetByID), c, id)
}

// IsBookPresent mocks base method.
func (m *MockBook) IsBookPresent(c *gofr.Context, id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBookPresent", c, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBookPresent indicates an expected call of IsBookPresent.
func (mr *MockBookMockRecorder) IsBookPresent(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBookPresent", reflect.TypeOf((*MockBook)(nil).IsBookPresent), c, id)
}

// Post mocks base method.
func (m *MockBook) Post(c *gofr.Context, book *models.Book) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", c, book)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockBookMockRecorder) Post(c, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockBook)(nil).Post), c, book)
}

// Update mocks base method.
func (m *MockBook) Update(c *gofr.Context, id int, book *models.Book) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, id, book)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBookMockRecorder) Update(c, id, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBook)(nil).Update), c, id, book)
}

// MockAuthor is a mock of Author interface.
type MockAuthor struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorMockRecorder
}

// MockAuthorMockRecorder is the mock recorder for MockAuthor.
type MockAuthorMockRecorder struct {
	mock *MockAuthor
}

// NewMockAuthor creates a new mock instance.
func NewMockAuthor(ctrl *gomock.Controller) *MockAuthor {
	mock := &MockAuthor{ctrl: ctrl}
	mock.recorder = &MockAuthorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthor) EXPECT() *MockAuthorMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAuthor) Delete(c *gofr.Context, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAuthorMockRecorder) Delete(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthor)(nil).Delete), c, id)
}

// IncludeAuthor mocks base method.
func (m *MockAuthor) IncludeAuthor(c *gofr.Context, id int) (models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncludeAuthor", c, id)
	ret0, _ := ret[0].(models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncludeAuthor indicates an expected call of IncludeAuthor.
func (mr *MockAuthorMockRecorder) IncludeAuthor(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncludeAuthor", reflect.TypeOf((*MockAuthor)(nil).IncludeAuthor), c, id)
}

// IsAuthorIDPresent mocks base method.
func (m *MockAuthor) IsAuthorIDPresent(c *gofr.Context, id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorIDPresent", c, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthorIDPresent indicates an expected call of IsAuthorIDPresent.
func (mr *MockAuthorMockRecorder) IsAuthorIDPresent(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorIDPresent", reflect.TypeOf((*MockAuthor)(nil).IsAuthorIDPresent), c, id)
}

// Post mocks base method.
func (m *MockAuthor) Post(c *gofr.Context, auth models.Author) (models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", c, auth)
	ret0, _ := ret[0].(models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockAuthorMockRecorder) Post(c, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockAuthor)(nil).Post), c, auth)
}

// Update mocks base method.
func (m *MockAuthor) Update(c *gofr.Context, id int, author models.Author) (models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, id, author)
	ret0, _ := ret[0].(models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAuthorMockRecorder) Update(c, id, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthor)(nil).Update), c, id, author)
}
